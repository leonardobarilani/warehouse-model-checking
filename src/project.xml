<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/*** GLOBAL SYSTEM PARAMETERS (1/2) ******************************************/

const int N_BOTS            = 3;
const int N_POD_ROWS        = 3;
const int N_PODS_PER_ROW_W  = 3;
const int N_PODS_PER_ROW_E  = 0;
const int QUEUE_CAPACITY    = 5;
const int TASK_GEN_MEAN     = 20;
const int TASK_GEN_VAR      = 5;
const int HUMAN_MEAN        = 2;
const int HUMAN_VAR         = 1;
const int BOT_IDLE_EXP_RATE = 3;
const int BOT_STEP_TIME     = 1;
const int TAU               = 1000;

/*** GLOBAL *DERIVED* SYSTEM PARAMETERS **************************************/

const int QUEUE_SIZE     = QUEUE_CAPACITY + 1;
const int N_PODS         = N_POD_ROWS * (N_PODS_PER_ROW_W + N_PODS_PER_ROW_E);
const int MAP_H          = N_POD_ROWS * 2 + 1;
const int MAP_W          = N_PODS_PER_ROW_W + ((N_PODS_PER_ROW_W == 0) ? 0 : 1) +
                           N_PODS_PER_ROW_E + ((N_PODS_PER_ROW_E == 0) ? 0 : 1) + 2;
const int HIGHWAY_W_COL  = N_PODS_PER_ROW_W + ((N_PODS_PER_ROW_W == 0) ? 0 : 1);
const int HIGHWAY_E_COL  = HIGHWAY_W_COL + 1;

// ID of the first pod on the East side of the warehouse.
// All pods on the East side have ID &gt;= POD_ID_DIVIDER.
const int POD_ID_DIVIDER = N_PODS_PER_ROW_W * N_POD_ROWS;

/*** GLOBAL TYPES ************************************************************/

typedef int[0, N_BOTS - 1] bot_t;
typedef int[0, N_PODS - 1] pod_t;
typedef struct { int r, c; } pos_t;

/*** GLOBAL SYSTEM PARAMETERS (2/2) ******************************************/

// Entry and Human can have arbitrary positions as long as they are *on the highway*.
// To simplify things, here we just put Entry and Human respectively at the top and
// bottom of the East column of the highway.
const pos_t ENTRY_POS = { 0        , HIGHWAY_E_COL };
const pos_t HUMAN_POS = { MAP_H - 1, HIGHWAY_E_COL };

/*** GLOBAL CONSTANTS ********************************************************/

const int NONE        = -1;
const int N           =  1; // North
const int S           =  2; // South
const int E           =  4; // East
const int W           =  8; // West
const int X           = 16; // Intersection
const int B           = 32; // Bot present
const int P           = 64; // Pod present

/*** GLOBAL VARIABLES ********************************************************/

int   map[MAP_H][MAP_W];    // warehouse map
bool  pod_free[N_PODS];     // status of pods free/busy == true/false
pos_t pod_position[N_PODS]; // positions of pods (coords), only generated once during initialization

// Task FIFO queue (implemented as a ring buffer)
int queue[QUEUE_SIZE];
int queue_head = 0;
int queue_tail = 0;

int tasks_lost      = 0; // n. of tasks lost because the queue was full
int tasks_completed = 0; // n. of tasks succesfully completed (pickup + delivery + return)

/*** CHANNELS ****************************************************************/

urgent broadcast chan asap;           // dummy urgent channel to complete actions as soon as possible
urgent broadcast chan step;           // synchronize bot movements to make bots stuck in line move as soon as possible
urgent broadcast chan init_done;      // signal everyone that global vars are initialized
urgent broadcast chan delivery_ready; // notify human that bot just arrived to deliver a pod
urgent broadcast chan human_done;     // notify currently delivering bot that human finished their job

/*** GLOBAL UTILITY FUNCTIONS ************************************************/

/*
 * Add one task to the queue. If the queue is full, the task gets lost and the
 * global counter tasks_lost is incremented. This assumes that the pod_id passed
 * corresponds to a free pod.
 */
void enqueue(int pod_id) {
    if ((queue_head + 1) % QUEUE_SIZE == queue_tail) {
        // Queue is full
        tasks_lost++;
        return;
    }

    queue[queue_head] = pod_id;
    queue_head = (queue_head + 1) % QUEUE_SIZE;
    pod_free[pod_id] = false;
}

/*
 * Pop and return a task from the queue, assuming it is not empty.
 */
int dequeue() {
    int el = queue[queue_tail];
    queue[queue_tail] = NONE;
    queue_tail = (queue_tail + 1) % QUEUE_SIZE;
    return el;
}

/*
 * Check whether the queue is empty.
 */
bool queue_empty() {
    return queue_head == queue_tail;
}

/*
 * Get the value of a cell of the map given its pos_t coordinates.
 */
int cell(pos_t p) {
    return map[p.r][p.c];
}

/*
 * Check whether a cell of the map is occupied by a bot or not.
 */
bool cell_is_free(pos_t p) {
    return !(cell(p) &amp; B);
}</declaration>
	<template>
		<name x="5" y="5">TaskGenerator</name>
		<parameter>const int mean, const int variance</parameter>
		<declaration>const int u_min = (mean - variance) / 3;
const int u_max = (mean + variance) / 3;
clock x;</declaration>
		<location id="id0" x="-306" y="-136">
			<label kind="invariant" x="-323" y="-170">x &lt;= u_max</label>
		</location>
		<location id="id1" x="-153" y="-136">
			<label kind="invariant" x="-170" y="-170">x &lt;= u_max</label>
		</location>
		<location id="id2" x="144" y="-136">
		</location>
		<location id="id3" x="-425" y="-136">
		</location>
		<location id="id4" x="4" y="-136">
			<label kind="invariant" x="-13" y="-170">x &lt;= u_max</label>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-408" y="-161">init_done?</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="select" x="-289" y="-93">pod_id: pod_t</label>
			<label kind="guard" x="-289" y="-76">pod_free[pod_id] &amp;&amp; cell_is_free(pod_position[pod_id])</label>
			<label kind="synchronisation" x="-289" y="-59">asap!</label>
			<label kind="assignment" x="-289" y="-42">enqueue(pod_id), x = 0</label>
			<nail x="144" y="-102"/>
			<nail x="-25" y="-102"/>
			<nail x="-306" y="-102"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="guard" x="-136" y="-153">x &gt;= u_min</label>
			<label kind="assignment" x="-136" y="-136">x = 0</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-289" y="-153">x &gt;= u_min</label>
			<label kind="assignment" x="-289" y="-136">x = 0</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="21" y="-153">x &gt;= u_min</label>
			<label kind="assignment" x="21" y="-136">x = 0</label>
		</transition>
	</template>
	<template>
		<name>Human</name>
		<parameter>const int mean, const int variance</parameter>
		<declaration>const int u_min = (mean - variance) / 3;
const int u_max = (mean + variance) / 3;
clock x;</declaration>
		<location id="id5" x="-85" y="-76">
		</location>
		<location id="id6" x="161" y="-76">
			<label kind="invariant" x="170" y="-102">x &lt;= u_max</label>
		</location>
		<location id="id7" x="340" y="-76">
			<label kind="invariant" x="357" y="-102">x &lt;= u_max</label>
		</location>
		<location id="id8" x="17" y="-76">
		</location>
		<location id="id9" x="688" y="-76">
		</location>
		<location id="id10" x="527" y="-76">
			<label kind="invariant" x="544" y="-102">x &lt;= u_max</label>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="578" y="-51">human_done!</label>
			<nail x="688" y="-25"/>
			<nail x="17" y="-25"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id10"/>
			<label kind="guard" x="357" y="-136">x &gt;= u_min</label>
			<label kind="assignment" x="356" y="-119">x = 0</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="170" y="-136">x &gt;= u_min</label>
			<label kind="assignment" x="170" y="-119">x = 0</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="34" y="-110">delivery_ready?</label>
			<label kind="assignment" x="34" y="-93">x = 0</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-68" y="-102">init_done?</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="guard" x="544" y="-136">x &gt;= u_min</label>
			<label kind="assignment" x="543" y="-119">x = 0</label>
		</transition>
	</template>
	<template>
		<name>Initializer</name>
		<declaration>void build_west() {
    int r, c;
    int cur_pod_id = 0;

    // Top row
    for (c = 0; c &lt; N_PODS_PER_ROW_W + 1; c++)
        map[0][c] = E;

    // Leftmost column
    for (r = 1; r &lt; MAP_H; r++)
        map[r][0] = N;

    // Pod rows
    for (r = 1; r &lt; MAP_H; r += 2) {
        for (c = 1; c &lt; N_PODS_PER_ROW_W + 1; c++) {
            pod_position[cur_pod_id].r = r;
            pod_position[cur_pod_id].c = c;
            cur_pod_id++;
            map[r    ][c] = P | N; // pass through pod
            map[r + 1][c] = W;
        }

        map[r + 1][N_PODS_PER_ROW_W + 1] = X;
    }
}

void build_east() {
    int r, c;
    int cur_pod_id = POD_ID_DIVIDER;

    // Top row
    for (c = MAP_W - N_PODS_PER_ROW_E - 1; c &lt; MAP_W; c++)
        map[0][c] = W;

    // Rightmost column
    for (r = 1; r &lt; MAP_H; r++)
        map[r][MAP_W - 1] = N;

    // Pod rows
    for (r = 1; r &lt; MAP_H; r += 2) {
        for (c = MAP_W - N_PODS_PER_ROW_E - 1; c &lt; MAP_W - 1; c++) {
            pod_position[cur_pod_id].r = r;
            pod_position[cur_pod_id].c = c;
            cur_pod_id++;
            map[r    ][c] = P | N; // pass through pod
            map[r + 1][c] = E;
        }

        map[r + 1][MAP_W - N_PODS_PER_ROW_E - 2] = X;
    }
}

void build_highway() {
    int r;

    // Nort-West tile
    map[0][HIGHWAY_W_COL] |= E;
    // South-East tile
    map[MAP_H - 1][HIGHWAY_E_COL] |= W;

    // West / East columns
    for(r = 0; r &lt; MAP_H - 1; r++) {
        map[r + 1][HIGHWAY_W_COL] |= N;
        map[r    ][HIGHWAY_E_COL] |= S;
    }
}

void initialize_all() {
    int i, r, c;

    for (i = 0; i &lt; N_PODS; i++)
        pod_free[i] = true;

    for (i = 0; i &lt; QUEUE_SIZE; i++)
        queue[i] = NONE;

    for (r = 0; r &lt; MAP_H; r++)
        for (c = 0; c &lt; MAP_W; c++)
            map[r][c] = 0;

    if (N_PODS_PER_ROW_W &gt; 0)
        build_west();
    if (N_PODS_PER_ROW_E &gt; 0)
        build_east();

    build_highway();
}
</declaration>
		<location id="id11" x="-68" y="-8">
			<committed/>
		</location>
		<location id="id12" x="68" y="-8">
		</location>
		<init ref="id11"/>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-51" y="-42">init_done!</label>
			<label kind="assignment" x="-51" y="-25">initialize_all()</label>
		</transition>
	</template>
	<template>
		<name>Bot</name>
		<parameter>const bot_t id</parameter>
		<declaration>const int OBJ_DELIVERY  = 1;
const int OBJ_PICKUP = 2;
const int OBJ_RETURN = 3;

clock x;
pos_t pos           = {-1, -1};
pos_t objective_pos = {-1, -1};
pod_t pod_id        = 0;
int   objective     = -1;
bool  did_step      = false;

/*
 * Update the current objective and objective position.
 */
void update_objective(const int obj) {
    objective = obj;

    if (objective == OBJ_DELIVERY)
        objective_pos = HUMAN_POS;
    else
        objective_pos = pod_position[pod_id];
}

/*
 * Enter the map at the entry point, initially without an
 * assigned objective.
 */
void enter() {
    pos = ENTRY_POS;
    map[pos.r][pos.c] |= B;
}

/*
 * Pop a task from the task queue and update the objective
 * to pod pickup.
 */
void get_task() {
    pod_id = dequeue();
    pod_free[pod_id] = false;
    update_objective(OBJ_PICKUP);
}

/*
 * Complete the current task after putting the pod back at
 * its original position in the map.
 */
void complete_task() {
    pod_free[pod_id] = true;
    pod_id = 0;
    objective_pos.r = -1;
    objective_pos.c = -1;
    tasks_completed++;
}

/*
 * Update given position one step in the only possible direction.
 */
void follow_path(int cell, pos_t &amp;p) {
    if (cell &amp; N) p.r--;
    else if (cell &amp; S) p.r++;
    else if (cell &amp; E) p.c++;
    else if (cell &amp; W) p.c--;
}

/*
 * Check whether or not we reached the *West* intersection right
 * below the wanted pod on the *West* side, and therefore we need to
 * enter the row to get to the pod.
 */
bool should_enter_west_pod_row(pos_t pos) {
    return pos.c == HIGHWAY_W_COL
           &amp;&amp; pod_id &lt; POD_ID_DIVIDER
           &amp;&amp; pos.r - 1 == objective_pos.r;
}

/*
 * Check whether or not we reached the *East* intersection right
 * below the wanted pod on the *East* side, and therefore we need to
 * enter the row to get to the pod.
 */
bool should_enter_east_pod_row(pos_t pos) {
    return pos.c == HIGHWAY_E_COL
           &amp;&amp; pod_id &gt;= POD_ID_DIVIDER
           &amp;&amp; pos.r - 1 == objective_pos.r;
}

/*
 * Try to step if possible, then set did_step accordingly.
 */
void maybe_step() {
    pos_t newpos = pos;
    int c = cell(pos);

    did_step = false;

    if (objective == OBJ_DELIVERY) {
        // We need to get to the human
        // Just keep going, ignore intersections and follow the only possible path
        follow_path(c, newpos);
    } else {
        // We need to get to the pod location, either for pickup or for return

        if (pos.c == objective_pos.c &amp;&amp; pos.r == objective_pos.r + 1) {
            // We are in the cell immediately S of the pod, go N
            newpos.r--;
        } else if (c &amp; X) {
            // We are at an intersection

            if (should_enter_west_pod_row(pos)) {
                // Enter West row containing the wanted pod
                newpos.c--;
            } else if (should_enter_east_pod_row(pos)) {
                // Enter Eeast row containing the wanted pod
                newpos.c++;
            } else {
                // We don't care about this intersection as it's not the one
                // right below the row containing the pod we want to reach.
                // Just keep going, follow the only possible path.
                follow_path(c, newpos);
            }
        } else {
            // Otherwise just follow the only possible dir
            follow_path(c, newpos);
        }
    }

    // Now try to actually step in the next cell (newpos)

    if (cell_is_free(newpos)) {
        map[pos.r   ][pos.c   ] -= B;
        map[newpos.r][newpos.c] |= B;
        pos = newpos;
        did_step = true;
    }
}</declaration>
		<location id="id13" x="-612" y="-25">
		</location>
		<location id="id14" x="-510" y="-25">
			<name x="-561" y="-8">WAIT_FIRST_TASK</name>
		</location>
		<location id="id15" x="-144" y="-25">
			<name x="-195" y="-59">STEP_TO_OBJECTIVE</name>
			<label kind="invariant" x="-195" y="-76">x &lt;= BOT_STEP_TIME</label>
		</location>
		<location id="id16" x="-144" y="59">
		</location>
		<location id="id17" x="-144" y="153">
			<committed/>
		</location>
		<location id="id18" x="-382" y="187">
			<name x="-425" y="197">WAIT_HUMAN</name>
		</location>
		<location id="id19" x="-382" y="332">
			<name x="-399" y="306">IDLE</name>
			<label kind="exponentialrate" x="-442" y="349">BOT_IDLE_EXP_RATE</label>
		</location>
		<location id="id20" x="-348" y="-25">
			<committed/>
		</location>
		<init ref="id13"/>
		<transition>
			<source ref="id20"/>
			<target ref="id15"/>
			<label kind="assignment" x="-289" y="-42">x = 0</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id19"/>
			<label kind="guard" x="-348" y="297">objective == OBJ_RETURN</label>
			<label kind="assignment" x="-272" y="314">complete_task()</label>
			<nail x="-144" y="332"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id20"/>
			<label kind="guard" x="-348" y="229">objective == OBJ_PICKUP</label>
			<label kind="assignment" x="-365" y="246">update_objective(OBJ_DELIVERY)</label>
			<nail x="-144" y="264"/>
			<nail x="-620" y="264"/>
			<nail x="-620" y="246"/>
			<nail x="-620" y="238"/>
			<nail x="-620" y="229"/>
			<nail x="-620" y="110"/>
			<nail x="-348" y="110"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-493" y="153">human_done?</label>
			<label kind="assignment" x="-612" y="170">update_objective(OBJ_RETURN)</label>
			<nail x="-620" y="188"/>
			<nail x="-620" y="110"/>
			<nail x="-501" y="110"/>
			<nail x="-348" y="110"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="guard" x="-119" y="0">x &gt;= BOT_STEP_TIME</label>
			<label kind="assignment" x="-119" y="16">maybe_step(), x = 0</label>
			<nail x="-127" y="-8"/>
			<nail x="-127" y="34"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="guard" x="-297" y="-8">did_step &amp;&amp;
pos != objective_pos</label>
			<label kind="synchronisation" x="-204" y="25">step!</label>
			<label kind="assignment" x="-204" y="42">x = 0</label>
			<nail x="-161" y="34"/>
			<nail x="-161" y="0"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id18"/>
			<label kind="guard" x="-348" y="153">objective == OBJ_DELIVERY</label>
			<label kind="synchronisation" x="-280" y="170">delivery_ready!</label>
			<nail x="-144" y="188"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="guard" x="-297" y="76">did_step &amp;&amp;
pos == objective_pos</label>
			<label kind="synchronisation" x="-195" y="110">step!</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id16"/>
			<label kind="guard" x="-76" y="51">!did_step</label>
			<label kind="synchronisation" x="-76" y="68">step?</label>
			<label kind="assignment" x="-76" y="85">maybe_step()</label>
			<nail x="-85" y="93"/>
			<nail x="-85" y="59"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id20"/>
			<label kind="guard" x="-493" y="-119">!queue_empty()
&amp;&amp; cell_is_free(ENTRY_POS)</label>
			<label kind="synchronisation" x="-493" y="-85">asap!</label>
			<label kind="assignment" x="-493" y="-68">enter(),
get_task()</label>
			<nail x="-374" y="-25"/>
			<nail x="-374" y="-25"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-595" y="-50">init_done?</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="guard" x="-518" y="280">!queue_empty()</label>
			<label kind="synchronisation" x="-459" y="297">asap!</label>
			<label kind="assignment" x="-484" y="314">get_task()</label>
			<nail x="-620" y="331"/>
			<nail x="-620" y="110"/>
			<nail x="-501" y="110"/>
			<nail x="-348" y="110"/>
		</transition>
	</template>
	<system>initializer = Initializer();
generator   = TaskGenerator(TASK_GEN_MEAN, TASK_GEN_VAR);
human       = Human(HUMAN_MEAN, HUMAN_VAR);

system initializer, generator, human, Bot;
</system>
	<queries>
		<query>
			<formula>E&lt;&gt; tasks_lost &gt; 0</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr [&lt;=100000] ( &lt;&gt; tasks_lost != 0 )</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
